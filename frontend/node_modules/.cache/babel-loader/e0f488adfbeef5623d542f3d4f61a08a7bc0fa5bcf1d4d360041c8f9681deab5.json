{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bella\\\\Desktop\\\\Master\\\\Fondament_Ai\\\\Project\\\\Dental_expert_system\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// // import React, { useState } from \"react\";\n// // import Navbar from \"./Navbar\"; // Import the Navbar component\n// // import \"./App.css\";\n\n// // const App = () => {\n// //   const [selectedSection, setSelectedSection] = useState(\"\");\n// //   const [checkedQuestions, setCheckedQuestions] = useState({});\n\n// //   // Questions for each section\n// //   const questions = {\n// //     Gums: [\n// //       \"What symptoms does the patient have?\",\n// //       \"What are the patient's medical records?\",\n// //       \"What is the preliminary diagnosis?\",\n// //     ],\n// //     Tooth: [\n// //       \"What equipment is needed?\",\n// //       \"Are there any recurring patient issues?\",\n// //       \"What dental software is being used?\",\n// //     ],\n// //     General: [\n// //       \"What tests are required?\",\n// //       \"What is the expected delivery date for test results?\",\n// //       \"Are additional materials needed?\",\n// //     ],\n// //   };\n\n// //   // Handle checkbox toggle\n// //   const handleCheckboxChange = (section, question) => {\n// //     setCheckedQuestions((prev) => ({\n// //       ...prev,\n// //       [section]: {\n// //         ...prev[section],\n// //         [question]: !prev[section]?.[question],\n// //       },\n// //     }));\n// //   };\n\n// //   return (\n// //     <div className=\"app-container\">\n// //       <Navbar />\n// //       <div className=\"section-buttons\">\n// //         <button\n// //           className=\"button-link\"\n// //           onClick={() => setSelectedSection(\"general\")}\n// //         >\n// //           General disease\n// //         </button>\n// //         <button\n// //           className=\"button-link\"\n// //           onClick={() => setSelectedSection(\"gum\")}\n// //         >\n// //           Gum diesese\n// //         </button>\n// //         <button\n// //           className=\"button-link\"\n// //           onClick={() => setSelectedSection(\"tooth\")}\n// //         >\n// //           Tooth diesese\n// //         </button>\n// //       </div>\n// //       <div className=\"questions-section\">\n// //         {selectedSection && (\n// //           <div>\n// //             <h2>\n// //               {selectedSection === \"general\"\n// //                 ? \"Questions for general desies\"\n// //                 : selectedSection === \"gum\"\n// //                 ? \"Questions for gum\"\n// //                 : \"Questions for tooth\"}\n// //             </h2>\n// //             <form>\n// //               {questions[selectedSection].map((question, index) => (\n// //                 <div key={index} className=\"checkbox-item\">\n// //                   <label>\n// //                     <input\n// //                       type=\"checkbox\"\n// //                       checked={\n// //                         checkedQuestions[selectedSection]?.[question] || false\n// //                       }\n// //                       onChange={() =>\n// //                         handleCheckboxChange(selectedSection, question)\n// //                       }\n// //                     />\n// //                     {question}\n// //                   </label>\n// //                 </div>\n// //               ))}\n// //             </form>\n// //           </div>\n// //         )}\n// //       </div>\n// //       {/* Footer Section */}\n// //       <footer className=\"footer\">\n// //         <p>&copy; 2024 Dental Expert System. All rights reserved.</p>\n// //         <p>\n// //           Designed with ❤️ by <a href=\"#\">Your Team</a>\n// //         </p>\n// //       </footer>\n// //     </div>\n// //   );\n// // };\n\n// // export default App;\n\n// import React, { useState } from \"react\";\n// import Navbar from \"./Navbar\"; // Import the Navbar component\n// import \"./App.css\";\n\n// const App = () => {\n//   const [selectedSection, setSelectedSection] = useState(\"\");\n//   const [checkedQuestions, setCheckedQuestions] = useState({});\n\n//   // Questions for each section\n//   const questions = {\n//     general: [\n//       \"What tests are required?\",\n//       \"What is the expected delivery date for test results?\",\n//       \"Are additional materials needed?\",\n//     ],\n//     gum: [\n//       \"What symptoms does the patient have?\",\n//       \"What are the patient's medical records?\",\n//       \"What is the preliminary diagnosis?\",\n//     ],\n//     tooth: [\n//       \"What equipment is needed?\",\n//       \"Are there any recurring patient issues?\",\n//       \"What dental software is being used?\",\n//     ],\n//   };\n\n//   // Handle checkbox toggle\n//   const handleCheckboxChange = (section, question) => {\n//     setCheckedQuestions((prev) => ({\n//       ...prev,\n//       [section]: {\n//         ...prev[section],\n//         [question]: !prev[section]?.[question],\n//       },\n//     }));\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <Navbar />\n//       <div className=\"section-buttons\">\n//         <button\n//           className=\"button-link\"\n//           onClick={() => setSelectedSection(\"general\")}\n//         >\n//           General disease\n//         </button>\n//         <button\n//           className=\"button-link\"\n//           onClick={() => setSelectedSection(\"gum\")}\n//         >\n//           Gum disease\n//         </button>\n//         <button\n//           className=\"button-link\"\n//           onClick={() => setSelectedSection(\"tooth\")}\n//         >\n//           Tooth disease\n//         </button>\n//       </div>\n//       <div className=\"questions-section\">\n//         {selectedSection && (\n//           <div>\n//             <h2>\n//               {selectedSection === \"general\"\n//                 ? \"Questions for general disease\"\n//                 : selectedSection === \"gum\"\n//                 ? \"Questions for Gums\"\n//                 : \"Questions for tooths\"}\n//             </h2>\n//             <form>\n//               {questions[selectedSection].map((question, index) => (\n//                 <div key={index} className=\"checkbox-item\">\n//                   <label>\n//                     <input\n//                       type=\"checkbox\"\n//                       checked={\n//                         checkedQuestions[selectedSection]?.[question] || false\n//                       }\n//                       onChange={() =>\n//                         handleCheckboxChange(selectedSection, question)\n//                       }\n//                     />\n//                     {question}\n//                   </label>\n//                 </div>\n//               ))}\n//             </form>\n//           </div>\n//         )}\n//       </div>\n//       {/* Footer Section */}\n//       <footer className=\"footer\">\n//         <p>&copy; 2024 Dental Expert System. All rights reserved.</p>\n//         <p>\n//           Designed with ❤️ by <a href=\"#\">Your Team</a>\n//         </p>\n//       </footer>\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState } from \"react\";\nimport Layout from \"./layout.js\"; // Import the Layout component\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedSection, setSelectedSection] = useState(\"\");\n  const [checkedQuestions, setCheckedQuestions] = useState({});\n  const [diagnosis, setDiagnosis] = useState(null); // State for diagnosis result\n  // Questions for each section\n  const questions = {\n    general: [\"What tests are required?\", \"What is the expected delivery date for test results?\", \"Are additional materials needed?\"],\n    gum: [\"What symptoms does the patient have?\", \"What are the patient's medical records?\", \"What is the preliminary diagnosis?\"],\n    tooth: [\"What equipment is needed?\", \"Are there any recurring patient issues?\", \"What dental software is being used?\"]\n  };\n\n  // Handle checkbox toggle\n  const handleCheckboxChange = (section, question) => {\n    setCheckedQuestions(prev => {\n      var _prev$section;\n      return {\n        ...prev,\n        [section]: {\n          ...prev[section],\n          [question]: !((_prev$section = prev[section]) !== null && _prev$section !== void 0 && _prev$section[question])\n        }\n      };\n    });\n  };\n\n  // Handle section change\n  const handleSectionChange = section => {\n    setSelectedSection(section);\n    setDiagnosis(null); // Clear diagnosis when a new section is selected\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Extract the indices of the selected questions\n    const selectedIndices = Object.entries(checkedQuestions[selectedSection] || {}).filter(([_, isChecked]) => isChecked) // Keep only checked questions\n    .map(([question]) => {\n      // Map the question back to its index in the original array\n      return questions[selectedSection].indexOf(question);\n    });\n    const payload = {\n      category: selectedSection,\n      // Send the category\n      indices: selectedIndices // Send the indices of selected questions\n    };\n    const response = await fetch(\"http://127.0.0.1:5000/api/submit\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    });\n    try {\n      if (response.ok) {\n        const data = await response.json();\n        setDiagnosis(data['prediction']); // Store the response in the state\n      } else {\n        alert(\"Failed to submit. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error submitting data:\", error);\n      alert(\"An error occurred while submitting data.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-link\",\n        onClick: () => setSelectedSection(\"general\"),\n        children: \"General disease\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-link\",\n        onClick: () => setSelectedSection(\"gum\"),\n        children: \"Gum disease\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-link\",\n        onClick: () => setSelectedSection(\"tooth\"),\n        children: \"Tooth disease\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questions-section\",\n      children: selectedSection && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Questions for \", selectedSection]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [questions[selectedSection].map((question, index) => {\n            var _checkedQuestions$sel;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"checkbox-item\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: ((_checkedQuestions$sel = checkedQuestions[selectedSection]) === null || _checkedQuestions$sel === void 0 ? void 0 : _checkedQuestions$sel[question]) || false,\n                  onChange: () => handleCheckboxChange(selectedSection, question)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 329,\n                  columnNumber: 21\n                }, this), question]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"submit-btn\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"diagnose\",\n            children: diagnosis ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Diagnosis Result:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n                children: JSON.stringify(diagnosis, null, 2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"pkqC3RE6lNBDBO2upukSSTt0Uug=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Layout","jsxDEV","_jsxDEV","App","_s","selectedSection","setSelectedSection","checkedQuestions","setCheckedQuestions","diagnosis","setDiagnosis","questions","general","gum","tooth","handleCheckboxChange","section","question","prev","_prev$section","handleSectionChange","handleSubmit","e","preventDefault","selectedIndices","Object","entries","filter","_","isChecked","map","indexOf","payload","category","indices","response","fetch","method","headers","body","JSON","stringify","ok","data","json","alert","error","console","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","index","_checkedQuestions$sel","type","checked","onChange","id","_c","$RefreshReg$"],"sources":["C:/Users/bella/Desktop/Master/Fondament_Ai/Project/Dental_expert_system/frontend/src/App.js"],"sourcesContent":["// // import React, { useState } from \"react\";\n// // import Navbar from \"./Navbar\"; // Import the Navbar component\n// // import \"./App.css\";\n\n// // const App = () => {\n// //   const [selectedSection, setSelectedSection] = useState(\"\");\n// //   const [checkedQuestions, setCheckedQuestions] = useState({});\n\n// //   // Questions for each section\n// //   const questions = {\n// //     Gums: [\n// //       \"What symptoms does the patient have?\",\n// //       \"What are the patient's medical records?\",\n// //       \"What is the preliminary diagnosis?\",\n// //     ],\n// //     Tooth: [\n// //       \"What equipment is needed?\",\n// //       \"Are there any recurring patient issues?\",\n// //       \"What dental software is being used?\",\n// //     ],\n// //     General: [\n// //       \"What tests are required?\",\n// //       \"What is the expected delivery date for test results?\",\n// //       \"Are additional materials needed?\",\n// //     ],\n// //   };\n\n// //   // Handle checkbox toggle\n// //   const handleCheckboxChange = (section, question) => {\n// //     setCheckedQuestions((prev) => ({\n// //       ...prev,\n// //       [section]: {\n// //         ...prev[section],\n// //         [question]: !prev[section]?.[question],\n// //       },\n// //     }));\n// //   };\n\n// //   return (\n// //     <div className=\"app-container\">\n// //       <Navbar />\n// //       <div className=\"section-buttons\">\n// //         <button\n// //           className=\"button-link\"\n// //           onClick={() => setSelectedSection(\"general\")}\n// //         >\n// //           General disease\n// //         </button>\n// //         <button\n// //           className=\"button-link\"\n// //           onClick={() => setSelectedSection(\"gum\")}\n// //         >\n// //           Gum diesese\n// //         </button>\n// //         <button\n// //           className=\"button-link\"\n// //           onClick={() => setSelectedSection(\"tooth\")}\n// //         >\n// //           Tooth diesese\n// //         </button>\n// //       </div>\n// //       <div className=\"questions-section\">\n// //         {selectedSection && (\n// //           <div>\n// //             <h2>\n// //               {selectedSection === \"general\"\n// //                 ? \"Questions for general desies\"\n// //                 : selectedSection === \"gum\"\n// //                 ? \"Questions for gum\"\n// //                 : \"Questions for tooth\"}\n// //             </h2>\n// //             <form>\n// //               {questions[selectedSection].map((question, index) => (\n// //                 <div key={index} className=\"checkbox-item\">\n// //                   <label>\n// //                     <input\n// //                       type=\"checkbox\"\n// //                       checked={\n// //                         checkedQuestions[selectedSection]?.[question] || false\n// //                       }\n// //                       onChange={() =>\n// //                         handleCheckboxChange(selectedSection, question)\n// //                       }\n// //                     />\n// //                     {question}\n// //                   </label>\n// //                 </div>\n// //               ))}\n// //             </form>\n// //           </div>\n// //         )}\n// //       </div>\n// //       {/* Footer Section */}\n// //       <footer className=\"footer\">\n// //         <p>&copy; 2024 Dental Expert System. All rights reserved.</p>\n// //         <p>\n// //           Designed with ❤️ by <a href=\"#\">Your Team</a>\n// //         </p>\n// //       </footer>\n// //     </div>\n// //   );\n// // };\n\n// // export default App;\n\n// import React, { useState } from \"react\";\n// import Navbar from \"./Navbar\"; // Import the Navbar component\n// import \"./App.css\";\n\n// const App = () => {\n//   const [selectedSection, setSelectedSection] = useState(\"\");\n//   const [checkedQuestions, setCheckedQuestions] = useState({});\n\n//   // Questions for each section\n//   const questions = {\n//     general: [\n//       \"What tests are required?\",\n//       \"What is the expected delivery date for test results?\",\n//       \"Are additional materials needed?\",\n//     ],\n//     gum: [\n//       \"What symptoms does the patient have?\",\n//       \"What are the patient's medical records?\",\n//       \"What is the preliminary diagnosis?\",\n//     ],\n//     tooth: [\n//       \"What equipment is needed?\",\n//       \"Are there any recurring patient issues?\",\n//       \"What dental software is being used?\",\n//     ],\n//   };\n\n//   // Handle checkbox toggle\n//   const handleCheckboxChange = (section, question) => {\n//     setCheckedQuestions((prev) => ({\n//       ...prev,\n//       [section]: {\n//         ...prev[section],\n//         [question]: !prev[section]?.[question],\n//       },\n//     }));\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <Navbar />\n//       <div className=\"section-buttons\">\n//         <button\n//           className=\"button-link\"\n//           onClick={() => setSelectedSection(\"general\")}\n//         >\n//           General disease\n//         </button>\n//         <button\n//           className=\"button-link\"\n//           onClick={() => setSelectedSection(\"gum\")}\n//         >\n//           Gum disease\n//         </button>\n//         <button\n//           className=\"button-link\"\n//           onClick={() => setSelectedSection(\"tooth\")}\n//         >\n//           Tooth disease\n//         </button>\n//       </div>\n//       <div className=\"questions-section\">\n//         {selectedSection && (\n//           <div>\n//             <h2>\n//               {selectedSection === \"general\"\n//                 ? \"Questions for general disease\"\n//                 : selectedSection === \"gum\"\n//                 ? \"Questions for Gums\"\n//                 : \"Questions for tooths\"}\n//             </h2>\n//             <form>\n//               {questions[selectedSection].map((question, index) => (\n//                 <div key={index} className=\"checkbox-item\">\n//                   <label>\n//                     <input\n//                       type=\"checkbox\"\n//                       checked={\n//                         checkedQuestions[selectedSection]?.[question] || false\n//                       }\n//                       onChange={() =>\n//                         handleCheckboxChange(selectedSection, question)\n//                       }\n//                     />\n//                     {question}\n//                   </label>\n//                 </div>\n//               ))}\n//             </form>\n//           </div>\n//         )}\n//       </div>\n//       {/* Footer Section */}\n//       <footer className=\"footer\">\n//         <p>&copy; 2024 Dental Expert System. All rights reserved.</p>\n//         <p>\n//           Designed with ❤️ by <a href=\"#\">Your Team</a>\n//         </p>\n//       </footer>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\nimport React, { useState } from \"react\";\nimport Layout from \"./layout.js\"; // Import the Layout component\nimport \"./App.css\";\n\nconst App = () => {\n  const [selectedSection, setSelectedSection] = useState(\"\");\n  const [checkedQuestions, setCheckedQuestions] = useState({});\n  const [diagnosis, setDiagnosis] = useState(null); // State for diagnosis result\n  // Questions for each section\n  const questions = {\n    general: [\n      \"What tests are required?\",\n      \"What is the expected delivery date for test results?\",\n      \"Are additional materials needed?\",\n    ],\n    gum: [\n      \"What symptoms does the patient have?\",\n      \"What are the patient's medical records?\",\n      \"What is the preliminary diagnosis?\",\n    ],\n    tooth: [\n      \"What equipment is needed?\",\n      \"Are there any recurring patient issues?\",\n      \"What dental software is being used?\",\n    ],\n  };\n\n  // Handle checkbox toggle\n  const handleCheckboxChange = (section, question) => {\n    setCheckedQuestions((prev) => ({\n      ...prev,\n      [section]: {\n        ...prev[section],\n        [question]: !prev[section]?.[question],\n      },\n    }));\n  };\n\n  // Handle section change\n  const handleSectionChange = (section) => {\n    setSelectedSection(section);\n    setDiagnosis(null); // Clear diagnosis when a new section is selected\n  };\n\n  \n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Extract the indices of the selected questions\n    const selectedIndices = Object.entries(\n      checkedQuestions[selectedSection] || {}\n    )\n      .filter(([_, isChecked]) => isChecked) // Keep only checked questions\n      .map(([question]) => {\n        // Map the question back to its index in the original array\n        return questions[selectedSection].indexOf(question);\n      });\n  \n    const payload = {\n      category: selectedSection, // Send the category\n      indices: selectedIndices,  // Send the indices of selected questions\n    };\n\n    \n    const response = await fetch(\"http://127.0.0.1:5000/api/submit\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    });\n\n    try{  \n      if (response.ok) {\n        const data = await response.json();\n        setDiagnosis(data['prediction']); // Store the response in the state\n      } else {\n        alert(\"Failed to submit. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error submitting data:\", error);\n      alert(\"An error occurred while submitting data.\");\n    }\n  };\n  \n  return (\n    <Layout>\n      <div className=\"section-buttons\">\n        <button\n          className=\"button-link\"\n          onClick={() => setSelectedSection(\"general\")}\n        >\n          General disease\n        </button>\n        <button\n          className=\"button-link\"\n          onClick={() => setSelectedSection(\"gum\")}\n        >\n          Gum disease\n        </button>\n        <button\n          className=\"button-link\"\n          onClick={() => setSelectedSection(\"tooth\")}\n        >\n          Tooth disease\n        </button>\n      </div>\n      <div className=\"questions-section\">\n        {selectedSection && (\n          <div>\n            <h2>Questions for {selectedSection}</h2>\n            <form onSubmit={handleSubmit}>\n              {questions[selectedSection].map((question, index) => (\n                <div key={index} className=\"checkbox-item\">\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={\n                        checkedQuestions[selectedSection]?.[question] || false\n                      }\n                      onChange={() =>\n                        handleCheckboxChange(selectedSection, question)\n                      }\n                    />\n                    {question}\n                  </label>\n                </div>\n              ))}\n              <button type=\"submit\" className=\"submit-btn\">\n                Submit\n              </button>\n              <div id='diagnose'>\n              {/* Render the diagnosis response */}\n              {diagnosis ? (\n                <div>\n                  <h3>Diagnosis Result:</h3>\n                  <pre>{JSON.stringify(diagnosis, null, 2)}</pre>\n                </div>\n              ) :(<div></div>)\n              }\n              </div>\n            </form>\n          </div>\n        )}\n      </div>\n    </Layout>\n  );\n};\n\nexport default App;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}